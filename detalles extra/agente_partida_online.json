{
  "name": "agente partida online",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.body.message }} user_id = {{ $json.body.userId }}",
        "options": {
          "systemMessage": "=Cuando el usuario diga algo como: \"Quiero jugar una partida con el personaje `nombre`\", sigue estos pasos cuidadosamente:\n\n---\n\n### üîç 1. B√∫squeda del personaje\n\n- Accede a la base de datos de postgres conectada.\n- Busca al personaje cuyo campo `nombre` coincida con el nombre proporcionado por el usuario. (Si no es identico preguntar por uno parecido)\n- Cada fila contiene como m√≠nimo:\n  - `nombre`\n  - `ficcion` (g√©nero o tipo de mundo: fantas√≠a, horror, sci-fi...)\n  - Estad√≠sticas: Fuerza, Destreza, Constituci√≥n, Inteligencia, Sabidur√≠a, Carisma\n  - `equipo` (descripci√≥n del equipo que puede afectar al combate)\n - `status` : vivo\n - `id_user`: {{ $json.body.userId }}\n\n---\n### 1.1 Si el personaje no existe\n- crea el personaje con todas las estadisticas necesarios, si el jugador no te las dice todas rellenas las que faltan y las mandas a crear personaje. antes de mandarlas dile al jugador si esta conforme con las estadisticas y las muestras\n- status \"vivo\"\n### üåç 2. Si el personaje existe:\n\n#### 2.1. Extrae el campo `ficcion` y genera una narraci√≥n breve (100‚Äì200 palabras):\n- Describe **el mundo** seg√∫n el tipo de ficci√≥n.\n- Incluye:\n  - El tono general del entorno (oscuro, esperanzador, decadente‚Ä¶)\n  - Elementos √∫nicos del tipo de ficci√≥n\n  - Qu√© est√° ocurriendo en ese mundo ahora mismo\n  - Lugares, facciones o conflictos\n  - 1 o 2 **ganchos narrativos** para futuras aventuras\n\n#### 2.2. Estilo de narraci√≥n:\n- Usa una voz inmersiva, como si fueras un narrador de rol.\n- No expliques reglas ni menciones estad√≠sticas.\n- No hables como asistente o sistema, solo narra.\n\n#### 2.3. Cierre de la introducci√≥n:\n- Pregunta:  \n  _‚Äú¬øTe gusta este universo para empezar tu aventura?‚Äù_\n- Si el usuario responde afirmativamente:\n  - Crea una peque√±a **escena narrativa inicial** donde el personaje interact√∫e un poco con el mundo (2‚Äì3 turnos de di√°logo o decisiones).\n  - Luego **da paso al combate**, siguiendo el punto 3.\n- Si el usuario responde negativamente:\n  - Genera un universo diferente (con un nuevo tono, est√©tica o g√©nero dentro de la misma ficci√≥n).\n  - Repite la pregunta.\n\n---\n\n### ‚ùå 3. Si el personaje NO existe:\n- Responde con algo como:  \n  _‚ÄúNo encontr√© a ning√∫n personaje llamado `nombre` en tu base de datos. ¬øQuieres que lo creemos juntos?‚Äù_\n\n---\n\n### ‚öîÔ∏è 4. COMBATE: cuando comience una batalla\n\n- Utiliza las **reglas de combate** definidas en el documento del Drive.\n- Entra a esa carpeta, localiza las reglas, y resume su funcionamiento b√°sico para ti.\n- Aplica esas reglas fielmente durante la batalla.\n\n#### Durante cada ronda de combate:\n1. **Indica expl√≠citamente las tiradas de dados necesarias** (ej. 1d20 + modificador).\n2. Realiza la tirada,usando el code dado en tools, muestra el resultado y la f√≥rmula utilizada:\n   - Ejemplo: _Tirada de ataque: 1d20 (12) + Destreza (3) = 15_\n3. Menciona si el ataque/acierto/acci√≥n tuvo √©xito o no, seg√∫n la mec√°nica del juego.\n4. Ten en cuenta equipo, bonificaciones y condiciones especiales.\n5. Describe la acci√≥n de forma narrativa (qu√© sucede visualmente).\n\nüîÑ Repite esto cada turno, alternando acciones del jugador y del oponente.\n\nüí° Si el jugador tiene dudas sobre reglas o quiere verlas, ofrece un resumen claro y directo desde el documento.\n\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        240,
        0
      ],
      "id": "dd13ce48-f064-44ad-94d7-35e6e8b8fa2d",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        20,
        240
      ],
      "id": "c1379be7-2f53-43d1-b797-cfc4bf580e06",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "EAf1KjQobP9StJ1R",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "typeVersion": 1,
      "position": [
        640,
        400
      ],
      "id": "49a0ce78-9c20-43e5-ae0c-2f93d3df1f5a",
      "name": "Calculator"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "test",
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        180,
        240
      ],
      "id": "96b7cf2e-d323-4e35-b6df-061570bcc458",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "GXi3a1UzUaWecfnU",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "name": "dados",
        "workflowId": {
          "__rl": true,
          "value": "JIq4jTY3euVPriPK",
          "mode": "list",
          "cachedResultName": "dados"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.1,
      "position": [
        500,
        400
      ],
      "id": "68652dc8-2603-4852-ace2-a8116ac325c3",
      "name": "Dados"
    },
    {
      "parameters": {
        "name": "reglas",
        "description": "Recibe las reglas de un pdf cargado como vectores",
        "workflowId": {
          "__rl": true,
          "value": "EApfyX6EvVFktRjO",
          "mode": "list",
          "cachedResultName": "reglas"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.1,
      "position": [
        380,
        400
      ],
      "id": "d77a2688-ea60-4ccf-803c-a4e03179180f",
      "name": "Reglas"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "personajes",
          "mode": "list",
          "cachedResultName": "personajes"
        },
        "returnAll": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Return_All', ``, 'boolean') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        500,
        220
      ],
      "id": "4ffd1117-30b0-49bd-80bd-abbe02f5a5aa",
      "name": "Leer base de datos",
      "credentials": {
        "postgres": {
          "id": "GXi3a1UzUaWecfnU",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Get all the data from postgress, Make sure you append the tables with correct schema. Every table is associated with some schema in the database",
        "operation": "executeQuery",
        "query": "{{ $fromAI(\"sql_query\", \"SQL Query\") }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        360,
        220
      ],
      "id": "b824d708-c768-4039-a18b-884fda5562b4",
      "name": "Actualizar base de datos",
      "credentials": {
        "postgres": {
          "id": "GXi3a1UzUaWecfnU",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.2,
      "position": [
        620,
        0
      ],
      "id": "1680c253-0a53-45fa-98c0-e5656553e2ca",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "chat",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -20,
        0
      ],
      "id": "6fc2861d-be89-4897-9e26-5c4a68ac2aa6",
      "name": "Webhook",
      "webhookId": "0ed37278-59c9-410c-b32e-5d28facc8cae"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list",
          "cachedResultName": "public"
        },
        "table": {
          "__rl": true,
          "value": "usuarios",
          "mode": "list",
          "cachedResultName": "usuarios"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        660,
        220
      ],
      "id": "c7324868-e4fa-42b2-8556-7b8eec5198d9",
      "name": "Postgres",
      "credentials": {
        "postgres": {
          "id": "GXi3a1UzUaWecfnU",
          "name": "Postgres account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Calculator": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Dados": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Reglas": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Leer base de datos": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Actualizar base de datos": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "46e6c2ec-493b-49f8-ace0-439076f592e4",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ab9d8d86ec8710140cf1279eab342fd138a6650ecb9f8a67ff88dc5fe6ea0279"
  },
  "id": "Jpji6iCUmgdOA0Ya",
  "tags": []
}